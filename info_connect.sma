/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <nvault>
#include <geoip>

#define PLUGIN "InfoConnect"
#define VERSION "1.0"
#define AUTHOR "CS-Suite | RevCrew"

#define PLUGIN_NAME "CS-Suite | Ic"

#define get_user_state(%1,%2) 		( %1 &   1 << ( %2 & 31 ) )
#define add_user_state(%1,%2)	 	( %1 |=  ( 1 << ( %2 & 31 ) ) )
#define remove_user_state(%1,%2)	( %1 &= ~( 1 << ( %2 & 31 ) ) )

new g_user_steam
new const VAULT_NAME[]  =  "infoconnect"
new const VAULT_KEY[]   = "connections"

const MAX_LENGHT = 25
const PLAYERS = 32

new g_iVault;
/* 	Cvars		*/
enum _:pCvars 
{
	CVAR_SOUND,
	CVAR_CONNECT,
	CVAR_PUTIN,
	CVAR_DISC,
	CVAR_CONNECT_M,
	CVAR_PUTIN_M,
	CVAR_DISC_M,
}

static gCvar[pCvars]

enum INFO
{
	NAME,
	STEAMID,
	IP,
	COUNTRY
}
new InfoChat[PLAYERS + 1][INFO][MAX_LENGHT]
new MSGid
public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	MSGid = get_user_msgid("SayText")
	server_print("%s RUN",PLUGIN_NAME)
	RegisterCvars()
	
	g_iVault = nvault_open(VAULT_NAME);
}

RegisterCvars()
{
  	static value[64]
	get_configsdir(value,63)
	
	gCvar[CVAR_SOUND] = register_cvar("ic_enable_sound","1")
	
	gCvar[CVAR_CONNECT] = register_cvar("ic_enable_connect","1")
	gCvar[CVAR_PUTIN] = register_cvar("ic_enable_putin","1")
	gCvar[CVAR_DISC] = register_cvar("ic_enable_disc","1")
	
	gCvar[CVAR_CONNECT_M] = register_cvar("ic_enable_connect_m","")
	gCvar[CVAR_PUTIN_M] = register_cvar("ic_enable_putin_m","")
	gCvar[CVAR_DISC_M] = register_cvar("ic_enable_disc_m","")
	
	formatex(value, 63, "%s/infochat.cfg",value)
	if(file_exists(value))
	{
		server_cmd("exec %s",value)
		server_exec();
	}
		
	
}

public client_connect(id)
{
	is_user_steam(id) ? add_user_state(g_user_steam, id) : remove_user_state(g_user_steam, id)
	get_user_name(id,InfoChat[id][NAME], charsmax(InfoChat[][]))
	get_user_authid(id,InfoChat[id][STEAMID], charsmax(InfoChat[][]))
	get_user_ip(id,InfoChat[id][IP], charsmax(InfoChat[][]), 1)
	
	geoip_country(InfoChat[id][IP], InfoChat[id][COUNTRY], charsmax(InfoChat[][]))
	
	if(!get_pcvar_num(gCvar[CVAR_CONNECT]))
		return;
		
	static Message[160]
	get_pcvar_string(gCvar[CVAR_CONNECT_M], Message, charsmax(Message))
	
	if(!Message[0])
		return;
		
	ReplaceMessage(id,Message,charsmax(Message))
	ChatColor(0, "%s", Message)
}
public client_putinserver(id)
{
	static szNum[ 8 ];
        num_to_str(nvault_get(g_iVault, VAULT_KEY) + 1, szNum, 7);
        nvault_set(g_iVault , VAULT_KEY , szNum);
	
	if(get_pcvar_num(gCvar[CVAR_SOUND]))
		client_cmd(0,"spk buttons/bell1.wav")
		
	if(!get_pcvar_num(gCvar[CVAR_PUTIN]))
		return;
		
	static Message[160]
	get_pcvar_string(gCvar[CVAR_PUTIN_M], Message, charsmax(Message))
	
	if(!Message[0])
		return;
		
	replace_all(Message,charsmax(Message),"%connect%", szNum)	
	
	ReplaceMessage(id,Message,charsmax(Message))
	ChatColor(0, "%s", Message)
}
public client_disconnect(id)
{	
	if(get_pcvar_num(gCvar[CVAR_SOUND]))
		 client_cmd(0,"spk buttons/blip1.wav")
		
	if(!get_pcvar_num(gCvar[CVAR_DISC]))
		return;
		
	static Message[160]
	get_pcvar_string(gCvar[CVAR_DISC_M], Message, charsmax(Message))
	
	if(!Message[0])
		return;
		
	ReplaceMessage(id,Message,charsmax(Message))
	ChatColor(0, "%s", Message)
}
ReplaceMessage(id,msg[], len)
{
	replace_all(msg,len,"%name%", InfoChat[id][NAME])
	replace_all(msg,len,"%steamid%", InfoChat[id][STEAMID])
	replace_all(msg,len,"%ip%", InfoChat[id][IP])
	replace_all(msg,len,"%country%", InfoChat[id][COUNTRY])
	
	if( get_user_state(g_user_steam, id) )
		replace_all(msg,len,"%steam%", "STEAM")
	else
		replace_all(msg,len,"%steam%", "NON-STEAM")
		
	replace_all(msg,len,"%4%", "^4")
	replace_all(msg,len,"%3%", "^3")
	replace_all(msg,len,"%1%", "^1")
}
stock ChatColor(const id, const input[], any:...)
{
	new count = 1, players[32]
	static msg[191]
	vformat(msg, 190, input, 3)
	
	if (id) players[0] = id; else get_players(players, count, "ch")
	{
		for (new i = 0; i < count; i++)
		{
			if (is_user_connected(players[i]))
			{ 
				message_begin(MSG_ONE_UNRELIABLE, MSGid, _, players[i]);
				write_byte(players[i]);
				write_string(msg);
				message_end();
				
			}
		}
	}
	return 1;
}
stock bool:is_user_steam(id)
{
// Author Sh0oter
        static dp_pointer
        if(dp_pointer || (dp_pointer = get_cvar_pointer("dp_r_id_provider")))
        {
            server_cmd("dp_clientinfo %d", id)
            server_exec()
            return (get_pcvar_num(dp_pointer) == 2) ? true : false
        }
        return false
}
stock get_configsdir(name[],len)
{
	return get_localinfo("amxx_configsdir",name,len);
}
